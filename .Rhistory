setwd("~/GitHub/MMG-SEM")
devtools::document()
load("C:/Users/User/OneDrive - Tilburg University/1. Papers/Paper 4/R/AndresObject2.RData")
BasicModel.5clus.50S.FIML$sample.stats$S
lavaan::sam
14400*6
164/4
3360/4
2148/4
600*4
3588/4
source("C:/Users/User/OneDrive - Tilburg University/1. Papers/Paper 4/R/DataGeneration(endoCov).R", echo=TRUE)
source("C:/Users/User/OneDrive - Tilburg University/1. Papers/Paper 4/R/DataGeneration(endoCov).R", echo=TRUE)
setwd("C:/Users/User/OneDrive - Tilburg University/1. Papers/Paper 4/R")
library(lavaan)
library(semTools)
# remotes::install_github("simsem/semTools/semTools")
# remotes::install_github("simsem/semTools/semTools")
# wd
setwd("C:/Users/User/OneDrive - Tilburg University/1. Papers/Paper 4/R")
# source necessary functions
source("DataGeneration.R")
# source necessary functions
source("DataGeneration(endoCov).R")
# Define models for future simulations
model <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
# Regression parameters
F4 ~ F1
F3 ~ F1 + F2
'
S1 <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
'
S2 <- '
# Regression parameters
F4 ~ F1
F3 ~ F1 + F2
'
# Generate dummy data
set.seed(1)
Data <- DataGeneration(model = model, nclus = 2, ngroups = 6, N_g = 200, reg_coeff = 0.4,
balance = "bal", NonInvSize = 0, NonInvItems = 2, NonInvG = 0.5,
NonInvThreshSize = 0, NonInvGThresh = 0.5,
NonInvType = "random", c = 4)
source("C:/Users/User/OneDrive - Tilburg University/1. Papers/Paper 4/R/DataGeneration(endoCov).R", echo=TRUE)
Data <- DataGeneration(model = model, nclus = 2, ngroups = 6, N_g = 200, reg_coeff = 0.4,
balance = "bal", NonInvSize = 0, NonInvItems = 2, NonInvG = 0.5,
NonInvThreshSize = 0, NonInvGThresh = 0.5,
NonInvType = "random", c = 4)
Data$SimData <- as.data.frame(Data$SimData)
Data$SimData_con <- as.data.frame(Data$SimData_con)
Data$SimData
Data$SimData_con
source("C:/Users/User/OneDrive - Tilburg University/1. Papers/Paper 4/R/DataGeneration(endoCov).R", echo=TRUE)
source("C:/Users/User/OneDrive - Tilburg University/1. Papers/Paper 4/R/DataGeneration(endoCov).R", echo=TRUE)
# Generate dummy data
set.seed(1)
Data <- DataGeneration(model = model, nclus = 2, ngroups = 6, N_g = 200, reg_coeff = 0.4,
balance = "bal", NonInvSize = 0, NonInvItems = 2, NonInvG = 0.5,
NonInvThreshSize = 0, NonInvGThresh = 0.5,
NonInvType = "random", c = 4)
Data$SimData <- as.data.frame(Data$SimData)
Data$SimData_con <- as.data.frame(Data$SimData_con)
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings")
source("C:/Users/User/OneDrive - Tilburg University/1. Papers/Paper 4/R/DataGeneration(endoCov).R", echo=TRUE)
Data <- DataGeneration(model = model, nclus = 2, ngroups = 6, N_g = 200, reg_coeff = 0.4,
balance = "bal", NonInvSize = 0, NonInvItems = 2, NonInvG = 0.5,
NonInvThreshSize = 0, NonInvGThresh = 0.5,
NonInvType = "random", c = 4)
cov_eta[, , g]
beta
B1[k]
B1
source("C:/Users/User/OneDrive - Tilburg University/1. Papers/Paper 4/R/DataGeneration(endoCov).R", echo=TRUE)
Data <- DataGeneration(model = model, nclus = 2, ngroups = 6, N_g = 200, reg_coeff = 0.4,
balance = "bal", NonInvSize = 0, NonInvItems = 2, NonInvG = 0.5,
NonInvThreshSize = 0, NonInvGThresh = 0.5,
NonInvType = "random", c = 4)
beta
beta
B1
B2
endog1
source("C:/Users/User/OneDrive - Tilburg University/1. Papers/Paper 4/R/DataGeneration(endoCov).R", echo=TRUE)
Data <- DataGeneration(model = model, nclus = 2, ngroups = 6, N_g = 200, reg_coeff = 0.4,
balance = "bal", NonInvSize = 0, NonInvItems = 2, NonInvG = 0.5,
NonInvThreshSize = 0, NonInvGThresh = 0.5,
NonInvType = "random", c = 4)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings")
endog2
endog1
endog
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings")
fake_cov
endog
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings")
fake_model
fake_model
fake_model
cons_exo
n_exo
clus_label
fake_model$cluster
group_label
fake_model
fake_model
reg_labels
exo_labels
constraints
cons_exo
cluster_par
reg_labels
constraints_matrix
constraints_matrix
constraints_matrix
cons_exo_matrix
cons_exo_matrix
constraints_total
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings")
fake_model
ncol(fake_model)
ncol(constraints_total)
fake_model$cluster <- NULL
ncol(fake_model)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings")
colnames(fake_model)
colnames(constraints_total)
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings")
fake_model
z_gks
pi_ks
N_gks
s2out <- sem(
model = fake_model,    # 'fake' partable with duplicated parameters and so on
sample.cov = fake_cov, # 'fake' duplicated factors' cov matrix (repeated by the number of clusters)
sample.nobs = N_gks,   # Sample size per group-cluster combination weighted by the posteriors
baseline = FALSE, se = "none",
h1 = FALSE, check.post = FALSE,
control = list(rel.tol = 1e-06),
sample.cov.rescale = FALSE,
fixed.x = FALSE
)
partable(s2out)$est
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings")
sem(
model = fake_model,    # 'fake' partable with duplicated parameters and so on
sample.cov = fake_cov, # 'fake' duplicated factors' cov matrix (repeated by the number of clusters)
sample.nobs = N_gks,   # Sample size per group-cluster combination weighted by the posteriors
baseline = FALSE, se = "none",
h1 = FALSE, check.post = FALSE,
control = list(rel.tol = 1e-09),
sample.cov.rescale = FALSE,
fixed.x = FALSE
)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
z_gks
N_gks
partable(s2out)
fake_model
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
fake
partable(fake)
ncol(partable(fake))
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
fake_model
sem(
model = fake_model,    # 'fake' partable with duplicated parameters and so on
sample.cov = fake_cov, # 'fake' duplicated factors' cov matrix (repeated by the number of clusters)
sample.nobs = N_gks,   # Sample size per group-cluster combination weighted by the posteriors
baseline = FALSE, se = "none",
h1 = FALSE, check.post = FALSE,
control = list(rel.tol = 1e-09),
sample.cov.rescale = FALSE,
fixed.x = FALSE
)
LL
z_gks
N_gks
sem(
model = fake_model,    # 'fake' partable with duplicated parameters and so on
sample.cov = fake_cov, # 'fake' duplicated factors' cov matrix (repeated by the number of clusters)
sample.nobs = N_gks,   # Sample size per group-cluster combination weighted by the posteriors
start = start,         # Use final estimations from the previous iteration as starting point for this one
baseline = FALSE, se = "none",
h1 = FALSE, check.post = FALSE,
control = list(rel.tol = 1e-06),
sample.cov.rescale = FALSE,
fixed.x = FALSE
)
partable(s2out)$est
fake_model
View(fake_model)
sem(
model = fake_model,    # 'fake' partable with duplicated parameters and so on
sample.cov = fake_cov, # 'fake' duplicated factors' cov matrix (repeated by the number of clusters)
sample.nobs = N_gks,   # Sample size per group-cluster combination weighted by the posteriors
baseline = FALSE, se = "none",
h1 = FALSE, check.post = FALSE,
control = list(rel.tol = 1e-06),
sample.cov.rescale = FALSE,
fixed.x = FALSE, auto.cov.y = T
)
partable(sem(
model = fake_model,    # 'fake' partable with duplicated parameters and so on
sample.cov = fake_cov, # 'fake' duplicated factors' cov matrix (repeated by the number of clusters)
sample.nobs = N_gks,   # Sample size per group-cluster combination weighted by the posteriors
baseline = FALSE, se = "none",
h1 = FALSE, check.post = FALSE,
control = list(rel.tol = 1e-06),
sample.cov.rescale = FALSE,
fixed.x = FALSE, auto.cov.y = T
))
fake_model$free <- 1:nrow(fake_model)
sem(
model = fake_model,    # 'fake' partable with duplicated parameters and so on
sample.cov = fake_cov, # 'fake' duplicated factors' cov matrix (repeated by the number of clusters)
sample.nobs = N_gks,   # Sample size per group-cluster combination weighted by the posteriors
baseline = FALSE, se = "none",
h1 = FALSE, check.post = FALSE,
control = list(rel.tol = 1e-09),
sample.cov.rescale = FALSE,
fixed.x = FALSE
)
View(partable(sem(
model = fake_model,    # 'fake' partable with duplicated parameters and so on
sample.cov = fake_cov, # 'fake' duplicated factors' cov matrix (repeated by the number of clusters)
sample.nobs = N_gks,   # Sample size per group-cluster combination weighted by the posteriors
baseline = FALSE, se = "none",
h1 = FALSE, check.post = FALSE,
control = list(rel.tol = 1e-09),
sample.cov.rescale = FALSE,
fixed.x = FALSE
)))
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
View(fake_model)
partable(s2out)$est
View(partable(s2out))
loglik_gsw
loglik_gksw
z_gks
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
beta_ks
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
exog
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
beta_ks
psi_gks
psi_gks[[1,1]]
psi_gks[[1,2]]
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
psi_gks
psi_gks[[1,1]]
psi_gks[[1,2]]
psi_gks[[2,2]]
psi_gks[[3,2]]
psi_gks[[4,2]]
psi_gks[[5,2]]
psi_gks[[6,2]]
psi_gks[[7,2]]
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
fit.con$posteriors
fit.con$param$beta_ks
fit.con$param$psi_gks[[1,1]]
Data$psi_g
View(DataGeneration)
source("C:/Users/User/OneDrive - Tilburg University/1. Papers/Paper 4/R/DataGeneration(endoCov).R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
# Generate dummy data
set.seed(1)
Data <- DataGeneration(model = model, nclus = 2, ngroups = 6, N_g = 200, reg_coeff = 0.4,
balance = "bal", NonInvSize = 0, NonInvItems = 2, NonInvG = 0.5,
NonInvThreshSize = 0, NonInvGThresh = 0.5,
NonInvType = "random", c = 4)
Data$SimData <- as.data.frame(Data$SimData)
Data$SimData_con <- as.data.frame(Data$SimData_con)
sort(Data$NonInv$load)
sort(Data$NonInv$thresh)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
fit.con$param$beta_ks
fit.con$param$psi_gks[[1,1]]
fit.con$param$psi_gks[[1,2]]
fit.con$param$psi_gks[[2,2]]
fit.con$param$psi_gks[[3,2]]
fit.con$param$psi_gks[[4,2]]
fit.con$param$psi_gks[[5,2]]
Data$psi_g[5]
Data$psi_g
fit.con$posteriors
fit.con$param$psi_gks[[4,2]]
Data$psi_g[,,4]
Data$psi_g[,,5]
fit.con$param$psi_gks[[5,2]]
fit.con2 <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft", endogenous_cov = F)
S2.2 <- '
# Regression parameters
F4 ~ F1
F3 ~ F1 + F2
F3 ~~ 0*F4
'
fit.con2 <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2.2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft", endogenous_cov = F)
fit.con$param$beta_ks
fit.con2$param$beta_ks
