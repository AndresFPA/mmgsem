Data <- DataGeneration(model = model, nclus = 2, ngroups = 6, N_g = 200, reg_coeff = 0.4,
balance = "bal", NonInvSize = 0, NonInvItems = 2, NonInvG = 0.5,
NonInvThreshSize = 0, NonInvGThresh = 0.5,
NonInvType = "random", c = 4)
cov_eta[, , g]
beta
B1[k]
B1
source("C:/Users/User/OneDrive - Tilburg University/1. Papers/Paper 4/R/DataGeneration(endoCov).R", echo=TRUE)
Data <- DataGeneration(model = model, nclus = 2, ngroups = 6, N_g = 200, reg_coeff = 0.4,
balance = "bal", NonInvSize = 0, NonInvItems = 2, NonInvG = 0.5,
NonInvThreshSize = 0, NonInvGThresh = 0.5,
NonInvType = "random", c = 4)
beta
beta
B1
B2
endog1
source("C:/Users/User/OneDrive - Tilburg University/1. Papers/Paper 4/R/DataGeneration(endoCov).R", echo=TRUE)
Data <- DataGeneration(model = model, nclus = 2, ngroups = 6, N_g = 200, reg_coeff = 0.4,
balance = "bal", NonInvSize = 0, NonInvItems = 2, NonInvG = 0.5,
NonInvThreshSize = 0, NonInvGThresh = 0.5,
NonInvType = "random", c = 4)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings")
endog2
endog1
endog
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings")
fake_cov
endog
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings")
fake_model
fake_model
fake_model
cons_exo
n_exo
clus_label
fake_model$cluster
group_label
fake_model
fake_model
reg_labels
exo_labels
constraints
cons_exo
cluster_par
reg_labels
constraints_matrix
constraints_matrix
constraints_matrix
cons_exo_matrix
cons_exo_matrix
constraints_total
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings")
fake_model
ncol(fake_model)
ncol(constraints_total)
fake_model$cluster <- NULL
ncol(fake_model)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings")
colnames(fake_model)
colnames(constraints_total)
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings")
fake_model
z_gks
pi_ks
N_gks
s2out <- sem(
model = fake_model,    # 'fake' partable with duplicated parameters and so on
sample.cov = fake_cov, # 'fake' duplicated factors' cov matrix (repeated by the number of clusters)
sample.nobs = N_gks,   # Sample size per group-cluster combination weighted by the posteriors
baseline = FALSE, se = "none",
h1 = FALSE, check.post = FALSE,
control = list(rel.tol = 1e-06),
sample.cov.rescale = FALSE,
fixed.x = FALSE
)
partable(s2out)$est
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings")
sem(
model = fake_model,    # 'fake' partable with duplicated parameters and so on
sample.cov = fake_cov, # 'fake' duplicated factors' cov matrix (repeated by the number of clusters)
sample.nobs = N_gks,   # Sample size per group-cluster combination weighted by the posteriors
baseline = FALSE, se = "none",
h1 = FALSE, check.post = FALSE,
control = list(rel.tol = 1e-09),
sample.cov.rescale = FALSE,
fixed.x = FALSE
)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
z_gks
N_gks
partable(s2out)
fake_model
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
fake
partable(fake)
ncol(partable(fake))
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
fake_model
sem(
model = fake_model,    # 'fake' partable with duplicated parameters and so on
sample.cov = fake_cov, # 'fake' duplicated factors' cov matrix (repeated by the number of clusters)
sample.nobs = N_gks,   # Sample size per group-cluster combination weighted by the posteriors
baseline = FALSE, se = "none",
h1 = FALSE, check.post = FALSE,
control = list(rel.tol = 1e-09),
sample.cov.rescale = FALSE,
fixed.x = FALSE
)
LL
z_gks
N_gks
sem(
model = fake_model,    # 'fake' partable with duplicated parameters and so on
sample.cov = fake_cov, # 'fake' duplicated factors' cov matrix (repeated by the number of clusters)
sample.nobs = N_gks,   # Sample size per group-cluster combination weighted by the posteriors
start = start,         # Use final estimations from the previous iteration as starting point for this one
baseline = FALSE, se = "none",
h1 = FALSE, check.post = FALSE,
control = list(rel.tol = 1e-06),
sample.cov.rescale = FALSE,
fixed.x = FALSE
)
partable(s2out)$est
fake_model
View(fake_model)
sem(
model = fake_model,    # 'fake' partable with duplicated parameters and so on
sample.cov = fake_cov, # 'fake' duplicated factors' cov matrix (repeated by the number of clusters)
sample.nobs = N_gks,   # Sample size per group-cluster combination weighted by the posteriors
baseline = FALSE, se = "none",
h1 = FALSE, check.post = FALSE,
control = list(rel.tol = 1e-06),
sample.cov.rescale = FALSE,
fixed.x = FALSE, auto.cov.y = T
)
partable(sem(
model = fake_model,    # 'fake' partable with duplicated parameters and so on
sample.cov = fake_cov, # 'fake' duplicated factors' cov matrix (repeated by the number of clusters)
sample.nobs = N_gks,   # Sample size per group-cluster combination weighted by the posteriors
baseline = FALSE, se = "none",
h1 = FALSE, check.post = FALSE,
control = list(rel.tol = 1e-06),
sample.cov.rescale = FALSE,
fixed.x = FALSE, auto.cov.y = T
))
fake_model$free <- 1:nrow(fake_model)
sem(
model = fake_model,    # 'fake' partable with duplicated parameters and so on
sample.cov = fake_cov, # 'fake' duplicated factors' cov matrix (repeated by the number of clusters)
sample.nobs = N_gks,   # Sample size per group-cluster combination weighted by the posteriors
baseline = FALSE, se = "none",
h1 = FALSE, check.post = FALSE,
control = list(rel.tol = 1e-09),
sample.cov.rescale = FALSE,
fixed.x = FALSE
)
View(partable(sem(
model = fake_model,    # 'fake' partable with duplicated parameters and so on
sample.cov = fake_cov, # 'fake' duplicated factors' cov matrix (repeated by the number of clusters)
sample.nobs = N_gks,   # Sample size per group-cluster combination weighted by the posteriors
baseline = FALSE, se = "none",
h1 = FALSE, check.post = FALSE,
control = list(rel.tol = 1e-09),
sample.cov.rescale = FALSE,
fixed.x = FALSE
)))
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
View(fake_model)
partable(s2out)$est
View(partable(s2out))
loglik_gsw
loglik_gksw
z_gks
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
beta_ks
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
exog
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
beta_ks
psi_gks
psi_gks[[1,1]]
psi_gks[[1,2]]
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
psi_gks
psi_gks[[1,1]]
psi_gks[[1,2]]
psi_gks[[2,2]]
psi_gks[[3,2]]
psi_gks[[4,2]]
psi_gks[[5,2]]
psi_gks[[6,2]]
psi_gks[[7,2]]
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
fit.con$posteriors
fit.con$param$beta_ks
fit.con$param$psi_gks[[1,1]]
Data$psi_g
View(DataGeneration)
source("C:/Users/User/OneDrive - Tilburg University/1. Papers/Paper 4/R/DataGeneration(endoCov).R", echo=TRUE)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
# Generate dummy data
set.seed(1)
Data <- DataGeneration(model = model, nclus = 2, ngroups = 6, N_g = 200, reg_coeff = 0.4,
balance = "bal", NonInvSize = 0, NonInvItems = 2, NonInvG = 0.5,
NonInvThreshSize = 0, NonInvGThresh = 0.5,
NonInvType = "random", c = 4)
Data$SimData <- as.data.frame(Data$SimData)
Data$SimData_con <- as.data.frame(Data$SimData_con)
sort(Data$NonInv$load)
sort(Data$NonInv$thresh)
# Run MMG-SEM
# Continuous (Run normally as usual)
fit.con <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft")
fit.con$param$beta_ks
fit.con$param$psi_gks[[1,1]]
fit.con$param$psi_gks[[1,2]]
fit.con$param$psi_gks[[2,2]]
fit.con$param$psi_gks[[3,2]]
fit.con$param$psi_gks[[4,2]]
fit.con$param$psi_gks[[5,2]]
Data$psi_g[5]
Data$psi_g
fit.con$posteriors
fit.con$param$psi_gks[[4,2]]
Data$psi_g[,,4]
Data$psi_g[,,5]
fit.con$param$psi_gks[[5,2]]
fit.con2 <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft", endogenous_cov = F)
S2.2 <- '
# Regression parameters
F4 ~ F1
F3 ~ F1 + F2
F3 ~~ 0*F4
'
fit.con2 <- MMGSEM(dat = Data$SimData, S1 = S1, S2 = S2.2, group = "group", nclus = 2, seed = 1,
nstarts = 20, ordered = F, group.equal = "loadings", partition = "soft", endogenous_cov = F)
fit.con$param$beta_ks
fit.con2$param$beta_ks
?S3
median
methods(median)
median.default
new_dog <- function(name, age) {
structure(
list(
name = name,
age = age
),
class = "dog"
)
}
d <- new_dog(name = "Milo", age = 4)
class(d)
typeof(d)
d
class(d)
new_dog <- function(name, age) {
structure(
return(list(
name = name,
age = age
)),
class = "dog"
)
}
d <- new_dog(name = "Milo", age = 4)
typeof(d)
class(d)
new_dog <- function(name, age) {
structure(
list(
name = name,
age = age
),
class = "dog"
)
}
d <- new_dog(name = "Milo", age = 4)
typeof(d)
class(d)
print.dog <- function(x) {
cat("Dog: \n")
cat("\tName: ", x$name, "\n", sep = "")
cat("\tAge: ", x$age, "\n", sep = "")
}
print(d)
methods(print)
class(lavaan::cfa)
class(d)
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
fit <- lavaan(HS.model, data=HolzingerSwineford1939,
auto.var=TRUE, auto.fix.first=TRUE,
auto.cov.lv.x=TRUE)
library(lavaan)
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
fit <- lavaan(HS.model, data=HolzingerSwineford1939,
auto.var=TRUE, auto.fix.first=TRUE,
auto.cov.lv.x=TRUE)
summary(fit, fit.measures=TRUE)
class(fit)
lavaan
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
setwd("C:/Users/User/OneDrive - Tilburg University/1. Papers/Paper 4/R")
# Load example data
load("data_small.Rdata")
data <- data_small
#### Section 1 - Measurement model ####
# Fit the Step 1 model individually using lavaan
# Define the model using lavaan syntax
S1_model <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
'
# Fit the Measurement Model (using a Confirmatory Factor Analysis)
# Note that, at this stage, a measurement invariance testing should be done. We will not go into the detail on this in this tutorial.
# We assume (and know) that metric invariance holds as the data was generated in this way.
MM_fit <- lavaan::cfa(model = S1_model,         # Step 1 model syntax
data = data,              # Data
group = "group",          # Group variables
group.equal = "loadings") # Measurement model constraints (metric invariance)
#### Section 2 - Do analysis with mmgsem ####
# Define the models of step 1 and step 2 individually
S1_model <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
'
S2_model <- '
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
# Option 1: Use the lavaan object from section 1
mmgsem_fit <- mmgsem::MMGSEM(dat    = data,     # Data
S1     = S1_model, # Model syntax for step 1 (measurement model)
S2     = S2_model, # Model syntax for step 2 (structural model)
group  = "group",  # Grouping variable
nclus  = 4,        # How many clusters?
seed   = 1,        # Seed for replication purposes
s1_fit = MM_fit)   # If we have it, input of step 1 (lavaan object of the measurement model)
class(mmgsem_fit)
mmgsem_fit <- MMGSEM(dat    = data,     # Data
S1     = S1_model, # Model syntax for step 1 (measurement model)
S2     = S2_model, # Model syntax for step 2 (structural model)
group  = "group",  # Grouping variable
nclus  = 4,        # How many clusters?
seed   = 1,        # Seed for replication purposes
s1_fit = MM_fit)   # If we have it, input of step 1 (lavaan object of the measurement model)
# Option 1: Use the lavaan object from section 1
mmgsem_fit <- mmgsem(dat    = data,     # Data
S1     = S1_model, # Model syntax for step 1 (measurement model)
S2     = S2_model, # Model syntax for step 2 (structural model)
group  = "group",  # Grouping variable
nclus  = 4,        # How many clusters?
seed   = 1,        # Seed for replication purposes
s1_fit = MM_fit)   # If we have it, input of step 1 (lavaan object of the measurement model)
class(mmgsem_fit)
class(mmgsem_fit) <- "mmgsem"
class(mmgsem_fit)
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Option 1: Use the lavaan object from section 1
mmgsem_fit <- mmgsem(dat    = data,     # Data
S1     = S1_model, # Model syntax for step 1 (measurement model)
S2     = S2_model, # Model syntax for step 2 (structural model)
group  = "group",  # Grouping variable
nclus  = 4,        # How many clusters?
seed   = 1,        # Seed for replication purposes
s1_fit = MM_fit)   # If we have it, input of step 1 (lavaan object of the measurement model)
class(mmgsem_fit)
source("~/GitHub/MMG-SEM/R/MMG-SEM.R", echo=TRUE)
# Option 1: Use the lavaan object from section 1
mmgsem_fit <- mmgsem(dat    = data,     # Data
S1     = S1_model, # Model syntax for step 1 (measurement model)
S2     = S2_model, # Model syntax for step 2 (structural model)
group  = "group",  # Grouping variable
nclus  = 4,        # How many clusters?
seed   = 1,        # Seed for replication purposes
s1_fit = MM_fit)   # If we have it, input of step 1 (lavaan object of the measurement model)
class(mmgsem_fit)
source("~/GitHub/MMG-SEM/R/summary_mmgsem.R", echo=TRUE)
source("~/GitHub/MMG-SEM/R/plot_mmgsem.R", echo=TRUE)
source("~/GitHub/MMG-SEM/R/test_mmgsem.R", echo=TRUE)
summary(mmgsem_fit)
source("~/GitHub/MMG-SEM/R/ModelSelection.R", echo=TRUE)
modelSelection_fit <- ModelSelection(dat      = data,     # Data
S1       = S1_model, # Model syntax for step 1 (measurement model)
S2       = S2_model, # Model syntax for step 2 (structural model)
group    = "group",  # Grouping variable
clusters = c(1,6),   # Instead of a specific number of clusters, set the lower and upper limit of the models we want to run (e.g., from 1 to 6 clusters)
seed     = 1,        # Seed for replication purposes
s1_fit   = MM_fit)   # If we have it, input of step 1 (lavaan object of the measurement model)
modelSelection_fit <- ModelSelection(dat      = data,     # Data
S1       = S1_model, # Model syntax for step 1 (measurement model)
S2       = S2_model, # Model syntax for step 2 (structural model)
group    = "group",  # Grouping variable
nclus = c(1,6),   # Instead of a specific number of clusters, set the lower and upper limit of the models we want to run (e.g., from 1 to 6 clusters)
seed     = 1,        # Seed for replication purposes
s1_fit   = MM_fit)   # If we have it, input of step 1 (lavaan object of the measurement model)
source("~/GitHub/MMG-SEM/R/ModelSelection.R", echo=TRUE)
modelSelection_fit <- ModelSelection(dat      = data,     # Data
S1       = S1_model, # Model syntax for step 1 (measurement model)
S2       = S2_model, # Model syntax for step 2 (structural model)
group    = "group",  # Grouping variable
nclus = c(1,6),   # Instead of a specific number of clusters, set the lower and upper limit of the models we want to run (e.g., from 1 to 6 clusters)
seed     = 1,        # Seed for replication purposes
s1_fit   = MM_fit)   # If we have it, input of step 1 (lavaan object of the measurement model)
CHull(loglik = unlist(LL), nrpar = unlist(nrpar), nsclust = nclus)
nclus
modelSelection_fit <- ModelSelection(dat      = data,     # Data
S1       = S1_model, # Model syntax for step 1 (measurement model)
S2       = S2_model, # Model syntax for step 2 (structural model)
group    = "group",  # Grouping variable
nclus = c(1,6),   # Instead of a specific number of clusters, set the lower and upper limit of the models we want to run (e.g., from 1 to 6 clusters)
seed     = 1,        # Seed for replication purposes
s1_fit   = MM_fit)   # If we have it, input of step 1 (lavaan object of the measurement model)
BIC_G
source("~/GitHub/MMG-SEM/R/ModelSelection.R", echo=TRUE)
modelSelection_fit <- ModelSelection(dat      = data,     # Data
S1       = S1_model, # Model syntax for step 1 (measurement model)
S2       = S2_model, # Model syntax for step 2 (structural model)
group    = "group",  # Grouping variable
nclus = c(1,6),   # Instead of a specific number of clusters, set the lower and upper limit of the models we want to run (e.g., from 1 to 6 clusters)
seed     = 1,        # Seed for replication purposes
s1_fit   = MM_fit)   # If we have it, input of step 1 (lavaan object of the measurement model)
class(modelSelection_fit)
summary(model = modelSelection_fit, model_selection = T)
