library(lavaan)
?lavTestScore
print("hello world")
"hahahaha"
lets
a <- 5
a + 7
lavaan:sam
lavaan::sam
library(lavaan)
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
fit <- cfa(HS.model, data = HolzingerSwineford1939)
summary(fit, fit.measures = TRUE)
fit@vcov
fit@vcov$vcov
lavInspect(fit, what = "h1")
lavInspect(fit, what = "h2")
lavInspect(fit, what = "hessian")
solve(lavInspect(fit, what = "hessian"))
dim(lavInspect(fit, what = "hessian"))
solve(-lavInspect(fit, what = "hessian"))
solve(-lavInspect(fit, what = "hessian"))
fit@vcov$vcov
library(lavaan)
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed   =~ x7 + x8 + x9 '
fit <- cfa(HS.model, data = HolzingerSwineford1939)
summary(fit, fit.measures = TRUE)
fit@vcov$vcov
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6 '
fit <- cfa(HS.model, data = HolzingerSwineford1939)
summary(fit, fit.measures = TRUE)
fit@vcov$vcov
lavInspect(object = fit, what = "Hessian")
hess <- lavInspect(object = fit, what = "Hessian")
solve(hess)
-solve(hess)
solve(-hess)
hess <- lavInspect(object = fit, what = "hessian")
solve(-hess)
info <- lavInspect(object = fit, what = "information")
info
info == hess
info
hess
solve(-info)
solve(-info)
fit@vcov$vcov
fit@vcov
summary(fit, fit.measures = TRUE)
solve(-hess)
sd(solve(-hess))
sqrt(solve(-hess))
hess
vcov <- lavInspect(object = fit, what = "vcov")
vocv
vcov
library(lavaan)
HS.model <- ' visual  =~ x1 + x2 + x3
textual =~ x4 + x5 + x6 '
fit <- cfa(HS.model, data = HolzingerSwineford1939)
vcov_par <- lavInspect(object = fit, what = "vcov")
vcov(fit)
vcov_par
lavaan:::computeExpectedInformation(fit@Model,
lavsamplestats = fit@SampleStats)
fit@Model
hess
hess <- lavInspect(object = fit, what = "hessian")
info <- lavInspect(object = fit, what = "information")
summary(fit, fit.measures = TRUE)
hess*301
-(hess*301)
solve(-(hess*301))
vcov_par
vcov_par
solve(-(hess*301))
round(solve(-(hess*301)), 4)
round(solve(-(hess*301)), 3)
vcov_par
round(solve(-(-(hess*301))), 4)
round(solve(-(-(hess*301))), 3)
vcov_par
hess <- -(hess*301)
hess
solve(-hess)
round(solve(-hess), 3)
vcov_par
vcov_par <- lavInspect(object = fit, what = "vcov.std.all")
vcov_par
vcov_par <- lavInspect(object = fit, what = "vcov.std.lv")
vcov_par
vcov_par <- lavInspect(object = fit, what = "vcov")
round(solve(-hess), 3)
vcov_par
solve(vcov_par)
hess <- lavInspect(object = fit, what = "hessian")
-(hess*301)
lavInspect(object = fit, what = "information")
lavInspect(object = fit, what = "information")9301
lavInspect(object = fit, what = "information")*301
-(hess*301)
solve(lavInspect(object = fit, what = "information")*301)
round(solve(lavInspect(object = fit, what = "information")*301), 3)
round(solve(lavInspect(object = fit, what = "information")*301), 3) == round(lavInspect(object = fit, what = "vcov"), 3)
all(round(solve(lavInspect(object = fit, what = "information")*301), 3) == round(lavInspect(object = fit, what = "vcov"), 3))
sqrt(round(solve(lavInspect(object = fit, what = "information")*301), 3))
summary(fit, fit.measures = TRUE)
sqrt(round(solve(lavInspect(object = fit, what = "information")*301), 3))
# Information matrix
info <- lavInspect(object = fit, what = "information")
info <- (info*301)
info
round(solve(info), 3)
all(round(solve(info), 3) == vcov_par)
round(solve(info), 3) == vcov_par
all(round(solve(info), 3) == round(vcov_par, 3))
# Is the negative of the Hessian the same as the information matrix? FALSE
-hess
hess <- -(hess*301)
# Is the negative of the Hessian the same as the information matrix? FALSE
-hess
info
# Is the negative of the Hessian the same as the information matrix? FALSE
solve(-hess)
# Is the negative of the Hessian the same as the information matrix? FALSE
round(solve(-hess), 3)
round(solve(info), 3)
# Is the negative of the Hessian the same as the information matrix? FALSE
all(round(solve(-hess), 3) == round(solve(info), 3))
diag(round(solve(info), 3))
# The diagonal (the important part) is similar, but not the same
diag(round(solve(-hess), 3))
# Example factors loglikelihood vs observed loglikelihood
# Set wd
setwd("C:/Users/User/Documents/GitHub/MMG-SEM")
# Source necessary functions
source("v4-1 DataGeneration.R")
source("MMGSEM.R")
source("MMG-SEM.R")
source("E_Step.R")
setwd("C:/Users/User/Documents/GitHub/MMG-SEM_Simulation")
source("DataGeneration.R")
setwd("C:/Users/User/Documents/GitHub/MMG-SEM_Simulation/Simulation Study 1")
source("DataGeneration.R")
# Model Specification
model <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
Measur_model <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
'
Struc_model <- '
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
# Non-Invariance parameters (string used in the MMGSEM as an input argument)
NonInv <- c("F1 =~ x2", "F1 =~ x3",
"F2 =~ z2", "F2 =~ z3",
"F3 =~ m2", "F3 =~ m3",
"F4 =~ y2", "F4 =~ y3")
# Data Generation
set.seed(14) # One of the problematic data sets from the simulation
Data <- DataGeneration(model = model, nclus = 4, ngroups = 12, N_g = 100, reg_coeff = 0.2,
balance = "balanced", reliability = "high", NonInvSize = 0.6,
NonInvG = 0.25)$SimData
# 16-Jan-2023
library(lavaan)
Data <- DataGeneration(model = model, nclus = 4, ngroups = 12, N_g = 100, reg_coeff = 0.2,
balance = "balanced", reliability = "high", NonInvSize = 0.6,
NonInvG = 0.25)$SimData
# Model selection
ModelSelection(dat = Data, step1model = Measur_model, step2model = Struc_model, group = "group",
clusters = c(1, 6), seed = 14, nstarts = 20, printing = F, partition = "hard", NonInv = NULL,
allG = T, fit = "factors")
# 31-Jul-2023
library(lavaan)
# Example factors loglikelihood vs observed loglikelihood
# Set wd
setwd("C:/Users/User/Documents/GitHub/MMG-SEM")
# Source necessary functions
source("MMG-SEM.R")
source("E_Step.R")
source("ModelSelection.R")
# Source data generation
setwd("C:/Users/User/Documents/GitHub/MMG-SEM_Simulation/Simulation Study 1")
source("DataGeneration.R")
# Model Specification
model <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
Measur_model <- '
# factor loadings
F1 =~ x1 + x2 + x3 + x4 + x5
F2 =~ z1 + z2 + z3 + z4 + z5
F3 =~ m1 + m2 + m3 + m4 + m5
F4 =~ y1 + y2 + y3 + y4 + y5
'
Struc_model <- '
# Regression parameters
F4 ~ F1 + F3
F3 ~ F1 + F2
'
# Non-Invariance parameters (string used in the MMGSEM as an input argument)
NonInv <- c("F1 =~ x2", "F1 =~ x3",
"F2 =~ z2", "F2 =~ z3",
"F3 =~ m2", "F3 =~ m3",
"F4 =~ y2", "F4 =~ y3")
# Data Generation
set.seed(14) # One of the problematic data sets from the simulation
Data <- DataGeneration(model = model, nclus = 4, ngroups = 12, N_g = 100, reg_coeff = 0.2,
balance = "balanced", reliability = "high", NonInvSize = 0.6,
NonInvG = 0.25)$SimData
# Model selection
ModelSelection(dat = Data, step1model = Measur_model, step2model = Struc_model, group = "group",
clusters = c(1, 6), seed = 14, nstarts = 20, printing = F, partition = "hard", NonInv = NULL,
allG = T, fit = "factors")
# Example factors loglikelihood vs observed loglikelihood
# Set wd
setwd("C:/Users/User/Documents/GitHub/MMG-SEM")
source("CHull.R")
# Model selection
ModelSelection(dat = Data, step1model = Measur_model, step2model = Struc_model, group = "group",
clusters = c(1, 6), seed = 14, nstarts = 20, printing = F, partition = "hard", NonInv = NULL,
allG = T, fit = "factors")
# Model selection
ModelSelection(dat = Data, step1model = Measur_model, step2model = Struc_model, group = "group",
clusters = c(1, 6), seed = 14, nstarts = 20, printing = F, partition = "hard", NonInv = NonInv,
allG = T, fit = "factors")
source("~/GitHub/MMG-SEM/MMG-SEM.R", echo=TRUE)
source("~/GitHub/MMG-SEM/MMG-SEM.R", echo=TRUE)
source("~/GitHub/MMG-SEM/ModelSelection.R", echo=TRUE)
# Model selection
ModelSelection(dat = Data, step1model = Measur_model, step2model = Struc_model, group = "group",
clusters = c(1, 6), seed = 14, nstarts = 20, printing = F, partition = "hard", NonInv = NonInv,
allG = T, fit = "factors")
source("~/GitHub/MMG-SEM/MMG-SEM.R", echo=TRUE)
# Model selection
ModelSelection(dat = Data, step1model = Measur_model, step2model = Struc_model, group = "group",
clusters = c(1, 6), seed = 14, nstarts = 20, printing = F, partition = "hard", NonInv = NonInv,
allG = T, fit = "factors")
source("~/GitHub/MMG-SEM/ModelSelection.R", echo=TRUE)
# Model selection
ModelSelection(dat = Data, step1model = Measur_model, step2model = Struc_model, group = "group",
clusters = c(1, 6), seed = 14, nstarts = 20, printing = F, partition = "hard", NonInv = NonInv,
allG = T, fit = "factors")
model_fit[[k]]$AIC$observed
# Model selection
ModelSelection(dat = Data, step1model = Measur_model, step2model = Struc_model, group = "group",
clusters = c(1, 6), seed = 14, nstarts = 20, printing = F, partition = "hard", NonInv = NonInv,
allG = T, fit = "factors")
model_fit[[k]]$BIC$observed$BIC_G
model_fit[[k]]$AIC$Factors
model_fit[[k]]$AIC$observed
source("~/GitHub/MMG-SEM/ModelSelection.R", echo=TRUE)
source("~/GitHub/MMG-SEM/ModelSelection.R", echo=TRUE)
# Model selection
ModelSelection(dat = Data, step1model = Measur_model, step2model = Struc_model, group = "group",
clusters = c(1, 6), seed = 14, nstarts = 20, printing = F, partition = "hard", NonInv = NonInv,
allG = T, fit = "factors")
View(CHull)
# Data Generation
set.seed(14) # One of the problematic data sets from the simulation
Data <- DataGeneration(model = model, nclus = 4, ngroups = 12, N_g = 100, reg_coeff = 0.2,
balance = "unbalanced", reliability = "high", NonInvSize = 0.6,
NonInvG = 0.25)$SimData
# Model selection
ModelSelection(dat = Data, step1model = Measur_model, step2model = Struc_model, group = "group",
clusters = c(1, 6), seed = 14, nstarts = 20, printing = F, partition = "hard", NonInv = NULL,
allG = T, fit = "factors")
source("~/GitHub/MMG-SEM/ModelSelection.R", echo=TRUE)
Data <- DataGeneration(model = model, nclus = 4, ngroups = 12, N_g = 200, reg_coeff = 0.2,
balance = "unbalanced", reliability = "high", NonInvSize = 0.6,
NonInvG = 0.25)$SimData
# Model selection
ModelSelection(dat = Data, step1model = Measur_model, step2model = Struc_model, group = "group",
clusters = c(1, 6), seed = 14, nstarts = 20, printing = F, partition = "hard", NonInv = NULL,
allG = T, fit = "factors")
source("~/GitHub/MMG-SEM/ModelSelection.R", echo=TRUE)
# Model selection
ModelSelection(dat = Data, step1model = Measur_model, step2model = Struc_model, group = "group",
clusters = c(1, 6), seed = 14, nstarts = 20, printing = F, partition = "hard", NonInv = NULL,
allG = T, fit = "factors")
# Model selection
res <- ModelSelection(dat = Data, step1model = Measur_model, step2model = Struc_model, group = "group",
clusters = c(1, 6), seed = 14, nstarts = 20, printing = F, partition = "hard", NonInv = NULL,
allG = T, fit = "factors")
res$Overview
